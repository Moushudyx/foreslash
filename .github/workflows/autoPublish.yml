# 自动发布包到 NPM

name: 🧿 Automatic Publish to NPM

# 谢谢你 Fairy 🧿

on:
  push:
    branches:
      - master
    paths:
      - "package.json"  # 仅当 package.json 变化时触发

permissions:
  contents: write
  pull-requests: write

# 不允许同时进行多个部署，跳过非正在运行、非最新队列的运行队列，且不取消正在运行的工作流
concurrency:
  group: publish
  cancel-in-progress: false

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 🔍 Checkout code # 获取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 获取前一次提交, 对比版本
      - name: ⚙️ Setup Node # 安装 Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          registry-url: 'https://registry.npmjs.org'

      - name: 🔎 Detect version change # 检查 version 是否有变化
        id: version_check
        run: |
          # 获取当前版本
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # 获取上一个提交的版本
          git checkout HEAD^ package.json
          PREV_VERSION=$(node -p "require('./package.json').version")
          git checkout -f HEAD package.json # 恢复文件

          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREV_VERSION"

          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "Version changed - automatic publish process"
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No version change detected - skipping publish"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: 📦 Install dependencies # 安装依赖
        if: steps.version_check.outputs.version_changed == 'true'
        run: yarn install
      - name: 🚀 Build & Publish Package # 编译并发布
        if: steps.version_check.outputs.version_changed == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: 📝 Generate release notes # 生成 Release 相关信息
        # if: steps.version_check.outputs.version_changed == 'true'
        id: changelog
        run: |
          # 提取 CHANGELOG.md 中第一个二级标题下的内容
          awk '
          /^## / && !found {
            found=1;
            next
          }
          found && /^#/ {
            exit
          }
          found' CHANGELOG.md > release_notes.txt

          # 生成日期格式 YYYY-MM-DD
          DATE=$(date +'%Y-%m-%d')
          echo "Version ${{ steps.version_check.outputs.version }} - $DATE"
          echo "release_title=Version ${{ steps.version_check.outputs.version }} - $DATE" >> $GITHUB_OUTPUT
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$(cat release_notes.txt)" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          # echo "release_notes=$(cat release_notes.txt)" >> $GITHUB_OUTPUT
          echo "$(cat release_notes.txt)"
      - name: 🚀 Create GitHub Release # 发布 Release
        if: steps.version_check.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version_check.outputs.version }}
          name: ${{ steps.changelog.outputs.release_title }}
          body: ${{ steps.changelog.outputs.release_notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
