import { memo, sleep } from '../src/index'

describe('memo', () => {
  it('基本功能', () => {
    const fn = (itemA: any, itemB: any) => String(itemA) + String(itemB)
    const originFn = jest.fn(fn)
    const memoFn = memo(originFn)
    const data1 = fn(1, 2)
    expect(memoFn(1, 2)).toBe(data1)
    expect(memoFn(1, 2)).toBe(data1)
    expect(memoFn(1, 2)).toBe(data1)
    expect(memoFn(1, 2)).toBe(data1)
    expect(originFn).toHaveBeenCalledTimes(1)
    // 区分不同的值
    expect(memoFn(1, 2)).toBe(data1)
    expect(memoFn('1', '2')).toBe(fn('1', '2'))
    expect(memoFn(1, '2')).toBe(fn(1, '2'))
    expect(memoFn('1', 2)).toBe(fn('1', 2))
    expect(originFn).toHaveBeenCalledTimes(4)
    expect(memoFn(1, 2)).toBe(data1)
    expect(memoFn('1', '2')).toBe(fn('1', '2'))
    expect(memoFn(1, '2')).toBe(fn(1, '2'))
    expect(memoFn('1', 2)).toBe(fn('1', 2))
    expect(originFn).toHaveBeenCalledTimes(4)
    // 特殊情况处理 RegExp
    expect(memoFn(/1/, /2/)).toBe(fn(/1/, /2/))
    expect(memoFn(/1/gi, /2/gi)).toBe(fn(/1/gi, /2/gi))
    expect(memoFn(/1/gi, /2/gi)).toBe(fn(/1/gi, /2/gi))
    expect(originFn).toHaveBeenCalledTimes(6)
    expect(memoFn(/1/, /2/)).toBe(fn(/1/, /2/))
    expect(memoFn(/1/gi, /2/gi)).toBe(fn(/1/gi, /2/gi))
    expect(memoFn(/1/gi, /2/gi)).toBe(fn(/1/gi, /2/gi))
    expect(originFn).toHaveBeenCalledTimes(6)
    // 特殊情况处理 Date
    expect(memoFn(/1/, new Date(321))).toBe(fn(/1/, new Date(321)))
    expect(memoFn(new Date(123), /2/gi)).toBe(fn(new Date(123), /2/gi))
    expect(memoFn(new Date(321), /2/gi)).toBe(fn(new Date(321), /2/gi))
    expect(memoFn(new Date(123), new Date(321))).toBe(fn(new Date(123), new Date(321)))
    expect(originFn).toHaveBeenCalledTimes(10)
    expect(memoFn(/1/, new Date(321))).toBe(fn(/1/, new Date(321)))
    expect(memoFn(new Date(123), /2/gi)).toBe(fn(new Date(123), /2/gi))
    expect(memoFn(new Date(321), /2/gi)).toBe(fn(new Date(321), /2/gi))
    expect(memoFn(new Date(123), new Date(321))).toBe(fn(new Date(123), new Date(321)))
    expect(originFn).toHaveBeenCalledTimes(10)
    expect(memoFn(BigInt(1), BigInt(2))).toBe(fn(BigInt(1), BigInt(2)))
    expect(memoFn(BigInt(1), BigInt(2))).toBe(fn(BigInt(1), BigInt(2)))
    expect(memoFn(BigInt(1), 2)).toBe(fn(BigInt(1), 2))
    expect(memoFn(BigInt(1), 2)).toBe(fn(BigInt(1), 2))
    expect(originFn).toHaveBeenCalledTimes(12)
  })
  it('其他情况测试', () => {
    const fn1 = () => 1
    const originFn1 = jest.fn(fn1)
    const memoFn1 = memo(originFn1)
    const data1 = fn1()
    expect(memoFn1()).toBe(data1)
    expect(memoFn1()).toBe(data1)
    expect(memoFn1()).toBe(data1)
    expect(originFn1).toHaveBeenCalledTimes(1)
    const fn2 = (...args: string[]) => args.join(';')
    const originFn2 = jest.fn(fn2)
    const memoFn2 = memo(originFn2)
    const data2 = fn2('a')
    expect(memoFn2('a')).toBe(data2)
    expect(memoFn2('a')).toBe(data2)
    expect(originFn2).toHaveBeenCalledTimes(1)
    expect(memoFn2('a', 'b')).toBe(fn2('a', 'b'))
    expect(memoFn2('a', 'b')).toBe(fn2('a', 'b'))
    expect(originFn2).toHaveBeenCalledTimes(2)
    expect(memoFn2('b', 'a')).toBe(fn2('b', 'a'))
    expect(memoFn2('b', 'a')).toBe(fn2('b', 'a'))
    expect(originFn2).toHaveBeenCalledTimes(3)
  })
  it('复杂情况处理', () => {
    const fn = (itemA: any, itemB: any) => String(itemA) + String(itemB)
    const originFn = jest.fn(fn)
    const memoFn = memo(originFn)
    expect(memoFn(/1/, '2')).toBe(fn(/1/, '2'))
    expect(memoFn(/1/, '2')).toBe(fn(/1/, '2'))
    expect(memoFn(/1/, /2/)).toBe(fn(/1/, /2/))
    expect(memoFn(/1/, /2/)).toBe(fn(/1/, /2/))
    expect(memoFn(/1/, '/2/')).toBe(fn(/1/, '/2/'))
    expect(memoFn(/1/, '/2/')).toBe(fn(/1/, '/2/'))
    expect(memoFn('/1/', '/2/')).toBe(fn('/1/', '/2/'))
    expect(memoFn('/1/', '/2/')).toBe(fn('/1/', '/2/'))
    expect(originFn).toHaveBeenCalledTimes(4)
    expect(memoFn([], {})).toBe(fn([], {}))
    expect(memoFn([], {})).toBe(fn([], {}))
    expect(memoFn({}, {})).toBe(fn({}, {}))
    expect(memoFn({}, {})).toBe(fn({}, {}))
    expect(memoFn([], [{}])).toBe(fn([], [{}]))
    expect(memoFn([], [{}])).toBe(fn([], [{}]))
    expect(memoFn([], [])).toBe(fn([], []))
    expect(memoFn([], [])).toBe(fn([], []))
    expect(originFn).toHaveBeenCalledTimes(8)
    expect(memoFn([1], { a: '2' })).toBe(fn([1], { a: '2' }))
    expect(memoFn([1], { a: '2' })).toBe(fn([1], { a: '2' }))
    expect(memoFn([1], { a: 2 })).toBe(fn([1], { a: 2 }))
    expect(memoFn([1], { a: 2 })).toBe(fn([1], { a: 2 }))
    expect(memoFn(['1'], { a: 2 })).toBe(fn(['1'], { a: 2 }))
    expect(memoFn(['1'], { a: 2 })).toBe(fn(['1'], { a: 2 }))
    expect(memoFn(['1'], { a: '2' })).toBe(fn(['1'], { a: '2' }))
    expect(memoFn(['1'], { a: '2' })).toBe(fn(['1'], { a: '2' }))
    expect(originFn).toHaveBeenCalledTimes(12)
    // 循环引用对象
    const a = { a: null as any }
    a.a = a
    expect(memoFn(a, { a: 2 })).toBe(fn(a, { a: 2 }))
    expect(memoFn(a, { a: 2 })).toBe(fn(a, { a: 2 }))
    expect(memoFn(a, { a: '2' })).toBe(fn(a, { a: '2' }))
    expect(memoFn(a, { a: '2' })).toBe(fn(a, { a: '2' }))
    expect(originFn).toHaveBeenCalledTimes(14)
  })
  it('缓存过期', async () => {
    const fn = (itemA: any, itemB: any) => String(itemA) + String(itemB)
    const originFn1 = jest.fn(fn)
    const originFn2 = jest.fn(fn)
    const memoFn1 = memo(originFn1, { ttl: 100 })
    const memoFn2 = memo(originFn2, { ttl: 200 })
    const data1 = fn(1, 2)
    const data2 = fn(1, '2')
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(originFn1).toHaveBeenCalledTimes(2)
    expect(originFn2).toHaveBeenCalledTimes(2)
    await sleep(110)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(originFn1).toHaveBeenCalledTimes(4)
    expect(originFn2).toHaveBeenCalledTimes(2)
    await sleep(110)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(originFn1).toHaveBeenCalledTimes(6)
    expect(originFn2).toHaveBeenCalledTimes(4)
  })
  it('使用次数', () => {
    const fn = (itemA: any, itemB: any) => String(itemA) + String(itemB)
    const originFn1 = jest.fn(fn)
    const originFn2 = jest.fn(fn)
    const memoFn1 = memo(originFn1, { count: 1 })
    const memoFn2 = memo(originFn2, { count: 3 })
    const data1 = fn(1, 2)
    const data2 = fn(1, '2')
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(originFn1).toHaveBeenCalledTimes(2)
    expect(originFn2).toHaveBeenCalledTimes(2)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(originFn1).toHaveBeenCalledTimes(4)
    expect(originFn2).toHaveBeenCalledTimes(2)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(originFn1).toHaveBeenCalledTimes(6)
    expect(originFn2).toHaveBeenCalledTimes(4)
  })
  it('自定义 key 生成', () => {
    const fn = (itemA: any, itemB: any) => String(itemA) + String(itemB)
    const originFn1 = jest.fn(fn)
    const originFn2 = jest.fn(fn)
    const memoFn1 = memo(originFn1, { getKey: (itemA, itemB) => String(itemA) + String(itemB) })
    const memoFn2 = memo(originFn2, { getKey: undefined })
    const data1 = fn(1, 2)
    const data2 = fn(1, '2')
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, 2)).toBe(data1)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn1(1, '2')).toBe(data2)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, 2)).toBe(data1)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(memoFn2(1, '2')).toBe(data2)
    expect(originFn1).toHaveBeenCalledTimes(1)
    expect(originFn2).toHaveBeenCalledTimes(2)
  })
})
